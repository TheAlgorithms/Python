"""
Project Euler Problem 2: https://projecteuler.net/problem=2

Even Fibonacci Numbers

Each new term in the Fibonacci sequence is generated by adding the previous
two terms. By starting with 1 and 2, the first 10 terms will be:

1, 2, 3, 5, 8, 13, 21, 34, 55, 89, ...

By considering the terms in the Fibonacci sequence whose values do not exceed
four million, find the sum of the even-valued terms.

References:
    - https://en.wikipedia.org/wiki/Fibonacci_number
"""


def solution(search_limit: int = 4000000) -> int:
    """
    Returns the sum of all even fibonacci sequence elements that are lower
    or equal to n.

    >>> solution(10)
    10
    >>> solution(15)
    10
    >>> solution(2)
    2
    >>> solution(1)
    0
    >>> solution(34)
    44
    >>> solution(0)
    Traceback (most recent call last):
        ...
    ValueError: Parameter search_limit must be greater than or equal to one.
    """

    if search_limit < 1:
        raise ValueError("Parameter search_limit must be greater than or equal to one.")

    last_number = 0
    new_number = last_number + 1

    last_two_numbers = [last_number, new_number]
    total = 0

    while last_two_numbers[last_number] <= search_limit:
        if last_two_numbers[last_number] % 2 == 0:
            total += last_two_numbers[last_number]

        output = last_two_numbers[last_number] + last_two_numbers[new_number]

        last_two_numbers[last_number] = last_two_numbers[new_number]

        last_two_numbers[new_number] = output

    return total


if __name__ == "__main__":
    print(f"{solution() = }")
