[project]
name = "thealgorithms-python"
version = "0.0.1"
description = "TheAlgorithms in Python"
authors = [ { name = "TheAlgorithms Contributors" } ]
requires-python = ">=3.11"
classifiers = [
  "Programming Language :: Python :: 3 :: Only",
  "Programming Language :: Python :: 3.11",
  "Programming Language :: Python :: 3.12",
  "Programming Language :: Python :: 3.13",
]
dependencies = [
  "beautifulsoup4>=4.12.3",
  "cython>=3.0.11",
  "fake-useragent>=1.5.1",
  "httpx>=0.28.1",
  "imageio>=2.36.1",
  "keras>=3.7",
  "lxml>=5.3",
  "matplotlib>=3.9.3",
  "numpy>=2.1.3",
  "opencv-python>=4.10.0.84",
  "pandas>=2.2.3",
  "pillow>=11",
  "rich>=13.9.4",
  "scikit-learn>=1.5.2",
  "scipy>=1.14.1",
  "sphinx-pyproject>=0.3",
  "statsmodels>=0.14.4",
  "sympy>=1.13.3",
  "tweepy>=4.14",
  "typing-extensions>=4.12.2",
  "xgboost>=2.1.3",
]

[dependency-groups]
test = [
  "pytest>=8.4.1",
  "pytest-cov>=6",
]

docs = [
  "myst-parser>=4",
  "sphinx-autoapi>=3.4",
  "sphinx-pyproject>=0.3",
]

euler-validate = [
  "httpx>=0.28.1",
  "numpy>=2.1.3",
]

[tool.ruff]
target-version = "py311"
output-format = "full"
lint.select = [
  "A",
  "ARG",
  "ASYNC",
  "B",
  "BLE",
  "C4",
  "C90",
  "DJ",
  "DTZ",
  "E",
  "EM",
  "EXE",
  "F",
  "FA",
  "FLY",
  "G",
  "I",
  "ICN",
  "INP",
  "INT",
  "ISC",
  "N",
  "NPY",
  "PD",
  "PGH",
  "PIE",
  "PL",
  "PT",
  "PYI",
  "RSE",
  "RUF",
  "S",
  "SIM",
  "SLF",
  "T10",
  "TD",
  "TID",
  "UP",
  "W",
  "YTT",
]
lint.ignore = [
  "B904",
  "B905",
  "EM101",
  "EXE001",
  "G004",
  "ISC001",
  "PLC0415",
  "PLC1901",
  "PLW060",
  "PLW1641",
  "PLW2901",
  "PT011",
  "PT018",
  "PT028",
  "S101",
  "S311",
  "SIM905",
  "SLF001",
  "UP037",
]

lint.per-file-ignores."data_structures/hashing/tests/test_hash_map.py" = [ "BLE001" ]
lint.per-file-ignores."hashes/enigma_machine.py" = [ "BLE001" ]
lint.per-file-ignores."machine_learning/sequential_minimum_optimization.py" = [ "SIM115" ]
lint.per-file-ignores."matrix/sherman_morrison.py" = [ "SIM103" ]
lint.per-file-ignores."physics/newtons_second_law_of_motion.py" = [ "BLE001" ]
lint.per-file-ignores."project_euler/problem_099/sol1.py" = [ "SIM115" ]
lint.per-file-ignores."sorts/external_sort.py" = [ "SIM115" ]

lint.mccabe.max-complexity = 17
lint.pylint.allow-magic-value-types = [ "float", "int", "str" ]
lint.pylint.max-args = 10
lint.pylint.max-branches = 20
lint.pylint.max-returns = 8
lint.pylint.max-statements = 88

[tool.codespell]
ignore-words-list = "3rt,abd,aer,ans,bitap,crate,damon,fo,followings,hist,iff,kwanza,manuel,mater,secant,som,sur,tim,toi,zar"
skip = "./.*,*.json,*.lock,ciphers/prehistoric_men.txt,project_euler/problem_022/p022_names.txt,pyproject.toml,strings/dictionary.txt,strings/words.txt"

[tool.pytest.ini_options]
markers = [
  "mat_ops: mark a test as utilizing matrix operations.",
]
addopts = [
  "--durations=10",
  "--doctest-modules",
  "--showlocals",
]

[tool.coverage.report]
omit = [
  ".env/*",
  "project_euler/*",
]
sort = "Cover"

[tool.sphinx-pyproject]
copyright = "2014, TheAlgorithms"
autoapi_dirs = [
  "audio_filters",
  "backtracking",
  "bit_manipulation",
  "blockchain",
  "boolean_algebra",
  "cellular_automata",
  "ciphers",
  "computer_vision",
  "conversions",
  "data_compression",
  "data_structures",
  "digital_image_processing",
  "divide_and_conquer",
  "dynamic_programming",
  "electronics",
  "file_transfer",
  "financial",
  "fractals",
  "fuzzy_logic",
  "genetic_algorithm",
  "geodesy",
  "geometry",
  "graphics",
  "graphs",
  "greedy_methods",
  "hashes",
  "knapsack",
  "linear_algebra",
  "linear_programming",
  "machine_learning",
  "maths",
  "matrix",
  "networking_flow",
  "neural_network",
  "other",
  "physics",
  "project_euler",
  "quantum",
  "scheduling",
  "searches",
  "sorts",
  "strings",
  "web_programming",
]
autoapi_member_order = "groupwise"
exclude_patterns = [ ".*/*", "docs/" ]
extensions = [
  "autoapi.extension",
  "myst_parser",
]
html_static_path = [ "_static" ]
html_theme = "alabaster"
myst_enable_extensions = [
  "amsmath",
  "attrs_inline",
  "colon_fence",
  "deflist",
  "dollarmath",
  "fieldlist",
  "html_admonition",
  "html_image",
  "replacements",
  "smartquotes",
  "strikethrough",
  "substitution",
  "tasklist",
]
myst_fence_as_directive = [ "include" ]
templates_path = [ "_templates" ]

[tool.sphinx-pyproject.source_suffix]
".rst" = "restructuredtext"
".md" = "markdown"
